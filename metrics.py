# -*- coding: utf-8 -*-
"""scores.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XZ3fkP6r7SNS-UB43yh3cFlOUyYrG2c9
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import cv2
import sys
import numpy as np
from criteria.lpips.networks import get_network, LinLayers
from criteria.lpips.utils import get_state_dict
from criteria.lpips.lpips import LPIPS
from PIL import Image
from torchvision import transforms
from models.attentionmodule.MODELS.cbam import CBAM
from criteria.id_loss import IDLoss
from criteria.attention_loss import AttentionLoss


def preprocess_image(image):
    transform = transforms.Compose([
        transforms.Resize((224, 224)),  # Resize to the input size of the network
        transforms.ToTensor(),
        # Normalize with the mean and std used for the pre-trained network
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    # image = Image.open(image_path).convert('RGB')
    return transform(image).unsqueeze(0)  # Add batch dimension

def lpips_loss(img1, img2):
  # other options: squeeze, vgg
  lpips_loss = LPIPS(net_type='alex').to('cuda')
  img1_tensor = preprocess_image(img1).to('cuda')
  img2_tensor = preprocess_image(img2).to('cuda')
  loss = lpips_loss(img1_tensor, img2_tensor)
  return loss.item()

def mse_loss(img1, img2):
    # img1 = cv2.imread(img1)
    # img2 = cv2.imread(img2)
    img1 = np.array(img1)
    img2 = np.array(img2)
    loss = np.sum((img1.astype("float") - img2.astype("float")) ** 2)
    loss /= float(img1.shape[0] * img2.shape[1])
    return loss

def similarity(img_sketch, img_gt, img_recon):
  img_sketch = preprocess_image(img_sketch).to('cuda')
  img_gt = preprocess_image(img_gt).to('cuda')
  img_recon = preprocess_image(img_recon).to('cuda')
  id_loss = IDLoss().to('cuda').eval()
  loss_value, _, _ = id_loss(img_recon, img_gt, img_sketch)
  return loss_value

def attention(img_sketch, img_gt, img_recon):
    # x: sketch, y: colored ground truth, y_hat: output
    img_sketch = preprocess_image(img_sketch).to('cuda')
    img_gt = preprocess_image(img_gt).to('cuda')
    img_recon = preprocess_image(img_recon).to('cuda')
    att_module = AttentionLoss().to('cuda').eval()
    score, _, _ = att_module(img_recon, img_gt, img_sketch)
    return score
